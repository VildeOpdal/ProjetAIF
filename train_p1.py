# -*- coding: utf-8 -*-
"""Untitled.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NNgXLBD3Gbt082fVIELECOdQpBIzKXFf
"""

import gdown
import zipfile

url = 'https://drive.google.com/uc?export=download&id=1-1OSGlN2EOqyZuehBgpgI8FNOtK-caYf'

gdown.download(url, 'dataset.zip', quiet=False)

with zipfile.ZipFile('dataset.zip', 'r') as zip_ref:
    zip_ref.extractall('/content/dataset')

import torch
import torch.nn as nn
import torch.optim as optim
from torch.optim.lr_scheduler import StepLR

from torchvision import datasets, transforms, models
from torch.utils.data import DataLoader, random_split, WeightedRandomSampler
import os
from sklearn.model_selection import train_test_split
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(f"Using device: {device}")

from torch.utils.data import Dataset

data_dir = '/content/dataset/content/sorted_movie_posters_paligema'

no_augmentation_classes = ['horror', 'drama', 'comedy']

transform_augmentation = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.RandomHorizontalFlip(),
    transforms.RandomRotation(10),
    transforms.ColorJitter(brightness=0.2, contrast=0.2, saturation=0.2, hue=0.2),
    transforms.RandomResizedCrop(224, scale=(0.8, 1.0)),
    transforms.ToTensor(),
    transforms.Normalize([0.5], [0.5])
])

transform_no_augmentation = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize([0.5], [0.5])
])

class SubsetDataset(Dataset):
    def __init__(self, dataset, no_augmentation_classes, transform_augmentation, transform_no_augmentation):
        self.dataset = dataset
        self.no_augmentation_classes = no_augmentation_classes
        self.transform_augmentation = transform_augmentation
        self.transform_no_augmentation = transform_no_augmentation

    def __len__(self):
        return len(self.dataset)

    def __getitem__(self, idx):
        img, label = self.dataset[idx]
        class_name = self.dataset.classes[label]

        if class_name in self.no_augmentation_classes:
            img = self.transform_no_augmentation(img)
        else:
            img = self.transform_augmentation(img)

        return img, label

dataset = datasets.ImageFolder(root=data_dir)

augmented_dataset = SubsetDataset(dataset, no_augmentation_classes, transform_augmentation, transform_no_augmentation)

train_size = int(0.75 * len(augmented_dataset))
val_size = int(0.20 * len(augmented_dataset))
test_size = len(augmented_dataset) - train_size - val_size
train_dataset, val_dataset, test_dataset = random_split(augmented_dataset, [train_size, val_size, test_size])

train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)
val_loader = DataLoader(val_dataset, batch_size=32, shuffle=False)
test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)

print(f"Training set size: {len(train_dataset)}")
print(f"Validation set size: {len(val_dataset)}")
print(f"Test set size: {len(test_dataset)}")

from collections import Counter

classes = dataset.classes

def count_samples_in_classes(dataset):
    class_counts = Counter([classes[label] for _, label in dataset])
    return class_counts

train_class_counts = count_samples_in_classes(train_dataset)
val_class_counts = count_samples_in_classes(val_dataset)
test_class_counts = count_samples_in_classes(test_dataset)

print("Train set class distribution:")
for class_name, count in train_class_counts.items():
    print(f"{class_name}: {count}")

print("\nValidation set class distribution:")
for class_name, count in val_class_counts.items():
    print(f"{class_name}: {count}")

print("\nTest set class distribution:")
for class_name, count in test_class_counts.items():
    print(f"{class_name}: {count}")

model = models.resnet50(pretrained=True)

num_ftrs = model.fc.in_features
model.fc = nn.Linear(num_ftrs, len(dataset.classes))

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
model = model.to(device)

for param in model.parameters():
    param.requires_grad = False

for param in model.fc.parameters():
    param.requires_grad = True

criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

scheduler = StepLR(optimizer, step_size=5, gamma=0.1)

def train_model(model, train_loader, val_loader, criterion, optimizer, scheduler, num_epochs=10, patience=3):
    best_val_loss = float('inf')
    epochs_without_improvement = 0

    for epoch in range(num_epochs):
        model.train()
        running_loss = 0.0
        correct = 0
        total = 0

        for inputs, labels in train_loader:
            inputs, labels = inputs.to(device), labels.to(device)

            optimizer.zero_grad()
            outputs = model(inputs)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()

            running_loss += loss.item()
            _, predicted = torch.max(outputs, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()

        train_loss = running_loss / len(train_loader)
        train_accuracy = 100 * correct / total

        model.eval()
        val_loss = 0.0
        correct = 0
        total = 0

        with torch.no_grad():
            for inputs, labels in val_loader:
                inputs, labels = inputs.to(device), labels.to(device)

                outputs = model(inputs)
                loss = criterion(outputs, labels)

                val_loss += loss.item()
                _, predicted = torch.max(outputs, 1)
                total += labels.size(0)
                correct += (predicted == labels).sum().item()

        val_loss = val_loss / len(val_loader)
        val_accuracy = 100 * correct / total

        print(f"Epoch {epoch + 1}/{num_epochs}")
        print(f"Train Loss: {train_loss:.4f}, Train Accuracy: {train_accuracy:.2f}%")
        print(f"Val Loss: {val_loss:.4f}, Val Accuracy: {val_accuracy:.2f}%")

        if val_loss < best_val_loss:
            best_val_loss = val_loss
            epochs_without_improvement = 0
        else:
            epochs_without_improvement += 1
            if epochs_without_improvement >= patience:
                print(f"Early stopping at epoch {epoch + 1}")
                break

        scheduler.step()

train_model(model, train_loader, val_loader, criterion, optimizer, scheduler, num_epochs=5, patience=3)

torch.save(model.state_dict(), 'model_resnet50.pth')

from google.colab import drive
drive.mount('/content/drive')

torch.save(model.state_dict(), '/content/drive/My Drive/model_resnet50.pth')

model.eval()
correct = 0
total = 0

with torch.no_grad():
    for inputs, labels in test_loader:
        inputs, labels = inputs.to(device), labels.to(device)

        outputs = model(inputs)
        _, predicted = torch.max(outputs, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

test_accuracy = 100 * correct / total
print(f"Test Accuracy: {test_accuracy:.2f}%")